create next app, npx create-next-app

for dynamic routes
import {useRouter} from "next/router";
const router = useRouter
router.pathname, router.query// for pathname of the file and query params
// you can also nest dynamic routes
for [...slug] then router.query.slug is an array of dynamic routes

import Link from "next/link"
<Link replace href="">Portfolio</Link> replace to replace the page so you can't navigate back to the previous page
href={{
    pathname: '/portfolio/[projectid]',
    query: { projectid: 2 }
}}>Portfolio number

<button onClick={() => {
    // router.replace('/portfolio/1/2')
    router.push('/portfolio/1/2')
    // router.push(
    //     {
    //         pathname:'',
    //         query:''
    //     }
    // )
}}>Load Project A</button>

404.js

//above are the first 3 chapters

what are <address> and <time> html used for, do they help for seo??????

const humanReadableDate = new Date(date).toLocaleDateString('en-US', {
day: 'numeric',
month: 'long',
year: 'numeric',
});
April 10, 2022

event-item.module.css
import classes from "./event-item.module.css";
className={classes.item}

component, folder called ui for components

import { Fragment } from "react"; //what is the difference between this and <></>

const yearInputRef = useRef()
yearInputRef.current.value
ref = {yearInputRef}

isNaN() function: is not a number
//first 4 chapters

//for the frontend
const {products} = props;
//backend
export async function getStaticProps(context) {
    const { params } = context;
    return { 
        props: {
            products: [{id:'p1',title: 'Product1'}]
        },
        revalidate: 10,
        notFound: true,
        redirect: {
            destination: "/no-data"
        }
    };
}

export async function getStaticPaths() {
    return {
        paths: [
            { params: { pid: 'p1' } },//pid is because the page called [pid] and p1 is the value for the parameter expected
            { params: { pid: 'p2' } },
            { params: { pid: 'p3' } },
        ],
        fallback: false //true // 'blocking'
    }
}

export async function getServerSideProps(context) {
    const { params,req,res }// you can manipulate the response if you want by adding something to it before sending it//// 105?????????
    accessing the above could response could be important if you need access to header or cookie for example
}

import 'fs' from "fs/promises";91(from fs/promisses??????)
import path from 'path'
const filePath = path.join(process.cwd(),'data','dummy-backend.json');

//to see the pages rendered next/server/pages

useSWR
//
ch 6
//
import Head from "next/head";
<Head>
    <title>NextJS Events</title>
    <meta "description" content="lorem...."/>
    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
</Head>
you can add key for meta tag if it doesn't contain a name so you tell next that this is unique and should be overwritten by another 1 if a conflict happens
you can add head before component in the _appfor the general head and title

_document.js
import Document, { Html, Head, Main, NextScript } from "next/document";
class MyDocument extends Document {
    render() {
        return (
            <Html lang="en">
                <Head />
                <body>
                    <div id="overlays" />
                    <Main />
                    <NextScript />
                </body>
            </Html>
        );
    }
}
export default MyDocument
//div (overflays) was added to allow us to html content outside of our application
component tree, for example for using these elements for react portals
we can select this div with react portal to portal our modals or overlays to this element

import Images from "next/image"
<Image src={`/${image}`} alt={imageAlt} width={400} height={400} />


api
function handler(req, res) {
    //for dynamic route, req.query.pageId
    if(req.method === 'POST') {
        req.body.email
    }
}
export default handler;

//react, <form onSubmit={submitFormHandler}>
for the fetch:
body: JSON.stringify(json object);
Content-Type: 'application/json'

function loadFeedbackHandler(id) {

}
loadFeedbackHandler.bind(null, id)


id: new Date().toISOString(),


chapter 12:
next config:
    environment variables

    // const adminPassword = encodeURIComponent(process.env.password)
    const adminPassword = encodeURIComponent(`${process.env.mongodb_password}`)
    let connectionString = `mongodb+srv://${process.env.mongodb_username}:${adminPassword}@${process.env.mongodb_clustername}.svlvw.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;
make next.config.js file

const { PHASE_DEVELOPMENT_SERVER } = require('next/constants');

module.exports = (phase) => {
  if (phase === PHASE_DEVELOPMENT_SERVER) {
    return {
      env: {
        mongodb_username: 'root',
        mongodb_password: '',
        mongodb_clustername: 'cluster0',
        mongodb_database: 'my-site-dev',
      },
    };
  }

  return {
    env: {
      mongodb_username: 'maximilian',
      mongodb_password: '2YkcXq43KyPk0vqp',
      mongodb_clustername: 'cluster0',
      mongodb_database: 'my-site',
    },
  };
};

vercel is a service of the same company that developed nextjs
netlify also have great nextjs support and makes hosting and scaling is simple

for static deployment
    export: next export


authentication

npm i mongodb
lib folder or helpers

[...nextauth].js
import NextAuth from "next-auth";
import Providers from "next-auth/providers"
import { verifyPassword } from "../../../lib/auth";

import { connectToDatabase } from "../../../lib/db";
export default NextAuth({
    session: {
        jwt: true//default value anyway
    },
    providers: [
        Providers.Credentials({
            async authorize(credentials, req) {
                const client = await connectToDatabase();

                const usersCollection = client.db().collection('users');
                const user = await usersCollection.findOne({ email: credentials.email })
                if (!user) {
                    client.close()
                    throw new Error("No User Found!");
                }

                const isValid = await verifyPassword(credentials.password, user.password);
                if (!isValid) {
                    client.close()
                    throw new Error('Could not log you in')
                }

                client.close()
                return { email: user.email };

            }
        }),
    ],

})

auth.js
import { hash, compare } from "bcryptjs";

export async function hashPassword(password) {
    const hashedPassword = hash(password, 12);
    return hashedPassword
}

export async function verifyPassword(password, hashedPassword) {
    const isValid = await compare(password, hashedPassword)
    return isValid;
}

frontend
const result = await signIn('credentials', {
    redirect: false,
    email: enteredEmail,
    password: enteredPassword
})


to see if a user is login or not//// Logout
import { useSession, signOut } from "next-auth/client";
const [session, loading] = useSession();
if the user do have a session then he is logged in
{!session && !loading && (
    <li>
        <Link href='/auth'>Login</Link>
    </li>
)}
////logout
signOut()

to navigate away when not logged in or when logged in
const [isLoading, setIsLoading] = useState(true);

useEffect(() => {
    getSession().then(session => {
        setIsLoading(false)
        if (!session) {
        window.location.href = "/auth"
        }
    })
}, [])
//server side to navigate away when not logged in or when logged in
export async function getServerSideProps(context) {
  const session = await getSession({ req: context.req })
  if (!session)
    return {
      redirect: {
        destination: "/auth",
        permanent: false //only this time we need to redirect
      }
    }
  return {
    props: { session }
  }
}

//for login to navigate for the first time
  const router = useRouter();
  const result = await signIn('credentials', {
        redirect: false,
        email: enteredEmail,
        password: enteredPassword
      })
      console.log("aa", result)
      if (!result.error) {
        router.replace("/profile")
      }


  const [session, loading] = useSession();
  useSession hook will run some login to know whether we are authenticated or not
  return {
    props: { session }
  }
  if we are returning the session on the server side for checking whether we are logged in or not
  then we can do the below to help next skip some logic if other pages are calling the session
  in the _app.js
  import { Provider } from 'next-auth/client';
    <Provider session={pageProps.session}>
      <Layout>
        <Component {...pageProps} />
      </Layout>
    </Provider>
    so we wrap everything with this provider

//server side authentication checking
const session = await getSession({ req: req });
    if (!session) {
        res.status(401).json({ message: 'Not authenticated!' });
        return;
    }
    so it also work on the server


    NEXTAUTH_URL environment variable not set
    you set the environment variable to your domain name and the error disapears



Ch11:
slug is more search engine friendly than ids in the url

Link: if you pass anything but text to the link then it won't render an anchor tag for you, Link will also work if you didn't add <a></a> but it won't render an anchor tag
<Link href='/'>
<a>
    </Link>
</a>